# -*- coding: utf-8 -*-
"""Audio_Text_Visual_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16QclWgafQGknsWWRN5pZmoGzo_M4auON
"""

import os
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader, random_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Config
DATA_DIR = "/data3/cgs616/ahmad/audio_text_face"
LABEL_FILE = "/data3/cgs616/ahmad/Audio_zip/Audio_model/B_classified_labels.csv"
BATCH_SIZE = 32
NUM_EPOCHS = 30
LEARNING_RATE = 0.001
NUM_CLASSES = 2
TEXT_SEQ_LEN = 20
TEXT_VOCAB_SIZE = 128  # ASCII size for ord() tokenizer
TEXT_EMBED_DIM = 50

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("✅ Using device:", device)

# Infer feature dimension
sample_file = pd.read_csv(os.path.join(DATA_DIR, os.listdir(DATA_DIR)[0]))
FEATURE_DIM = sample_file.shape[1] - 3  # Exclude Timestamp, Text, Confidence
print(f"✅ Feature dim: {FEATURE_DIM}")

# Labels
label_df = pd.read_csv(LABEL_FILE)
label_map = {str(row['Participant']): row['Sleep_Disorder'] for _, row in label_df.iterrows()}


# Dataset
class VectorSleepDataset(Dataset):
    def __init__(self, vector_dir, label_map, max_len=5000, text_seq_len=TEXT_SEQ_LEN):
        self.paths = sorted([os.path.join(vector_dir, f) for f in os.listdir(vector_dir) if f.endswith(".csv")])
        self.label_map = label_map
        self.max_len = max_len
        self.text_seq_len = text_seq_len

    def __len__(self):
        return len(self.paths)

    def __getitem__(self, idx):
        path = self.paths[idx]
        pid = os.path.basename(path).split('_')[1].split('.')[0]

        # Read data
        data = pd.read_csv(path)
        X_num = data.drop(['Timestamp', 'Text', 'Confidence'], axis=1).values
        X_num = StandardScaler().fit_transform(X_num)
        X_num = X_num[:self.max_len, :]
        if X_num.shape[0] < self.max_len:
            X_num = np.pad(X_num, ((0, self.max_len - X_num.shape[0]), (0, 0)))
        X_num = torch.tensor(X_num, dtype=torch.float32)

        # Process text: take one representative string and tokenize
        full_text = " ".join(data['Text'].tolist()).lower()[:self.text_seq_len]
        tokens = [ord(c) for c in full_text]
        tokens = tokens[:self.text_seq_len]
        tokens += [0] * (self.text_seq_len - len(tokens))
        X_text = torch.tensor(tokens, dtype=torch.long)

        y = torch.tensor(self.label_map.get(pid, -1), dtype=torch.long)

        return X_num, X_text, y


# Model
class MultimodalModel(nn.Module):
    def __init__(self, input_dim, output_dim, vocab_size=TEXT_VOCAB_SIZE, embed_dim=TEXT_EMBED_DIM):
        super().__init__()

        # Numerical(audio+face) Branch
        self.mlp = nn.Sequential(
            nn.Linear(input_dim, 128),
            nn.ReLU(),
            nn.Dropout(0.4),
            nn.Linear(128, 64),
            nn.ReLU()
        )

        # Text Branch
        self.embedding = nn.Embedding(vocab_size, embed_dim, padding_idx=0)
        self.lstm = nn.LSTM(embed_dim, 64, batch_first=True, bidirectional=True)
        self.text_fc = nn.Linear(128, 64)

        # Fusion
        self.fc_final = nn.Linear(64 + 64, output_dim)

    def forward(self, x_num, x_text):
        # MLP for audio+face
        x_num = self.mlp(x_num.mean(dim=1))

        # Text embedding + BiLSTM
        embedded = self.embedding(x_text)
        _, (hn, _) = self.lstm(embedded)
        x_text = torch.cat((hn[0], hn[1]), dim=1)
        x_text = self.text_fc(x_text)

        # Combine
        x = torch.cat((x_num, x_text), dim=1)
        return self.fc_final(x)


# Training + Evaluation
def train_and_evaluate():
    dataset = VectorSleepDataset(DATA_DIR, label_map)
    train_size = int(0.8 * len(dataset))
    test_size = len(dataset) - train_size
    train_set, test_set = random_split(dataset, [train_size, test_size])
    train_loader = DataLoader(train_set, batch_size=BATCH_SIZE, shuffle=True)
    test_loader = DataLoader(test_set, batch_size=BATCH_SIZE)

    model = MultimodalModel(FEATURE_DIM, NUM_CLASSES).to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)

    train_losses, train_accuracies, test_accuracies = [], [], []

    for epoch in range(NUM_EPOCHS):
        model.train()
        total_loss, all_preds, all_labels = 0, [], []

        for xb_num, xb_text, yb in train_loader:
            xb_num, xb_text, yb = xb_num.to(device), xb_text.to(device), yb.to(device)
            preds = model(xb_num, xb_text)
            loss = criterion(preds, yb)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            total_loss += loss.item()
            all_preds.extend(preds.argmax(dim=1).cpu().numpy())
            all_labels.extend(yb.cpu().numpy())

        train_acc = accuracy_score(all_labels, all_preds)
        train_losses.append(total_loss)
        train_accuracies.append(train_acc)

        # Evaluation
        model.eval()
        all_preds, all_labels = [], []
        with torch.no_grad():
            for xb_num, xb_text, yb in test_loader:
                preds = model(xb_num.to(device), xb_text.to(device)).argmax(dim=1).cpu()
                all_preds.extend(preds.numpy())
                all_labels.extend(yb.numpy())

        test_acc = accuracy_score(all_labels, all_preds)
        test_accuracies.append(test_acc)

        print(f"Epoch {epoch+1}/{NUM_EPOCHS}, Loss: {total_loss:.4f}, Train Acc: {train_acc:.4f}, Test Acc: {test_acc:.4f}")

    print(f"\n✅ Final Test Accuracy: {test_accuracies[-1]:.4f}")

    # Plot
    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    plt.plot(range(1, NUM_EPOCHS+1), train_losses, 'r-', label='Train Loss')
    plt.title("Loss over Epochs")
    plt.xlabel("Epoch")
    plt.ylabel("Loss")
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(range(1, NUM_EPOCHS+1), train_accuracies, 'b-', label='Train Acc')
    plt.plot(range(1, NUM_EPOCHS+1), test_accuracies, 'g-', label='Test Acc')
    plt.title("Accuracy over Epochs")
    plt.xlabel("Epoch")
    plt.ylabel("Accuracy")
    plt.legend()

    plt.tight_layout()
    plt.show()
    plt.savefig("ATPoojal.png")


if __name__ == "__main__":
    train_and_evaluate()